git教程
一.创建版本库
   1.初始化一个Git仓库，使用 git init 命令
   2.添加文件到Git仓库
      a. git add <file> 可反复使用多次，添加多个文件
	  b. git commit -m <message>  完成
	  
二.时光机穿梭
    1.查看结果状态
	    a.掌握工作区的状态，使用git status命令
		b.用git diff 查看修改内容
	2.版本回退
	    a.回退到上一版本 git reset --hard HEAD^ HEAD指向的版本是当前版本
		b.在版本之间穿梭 git reset --hard commit_id
		c.查看提交历史 git log
		d.查看命令历史 git reflog
	3.撤销修改
	    a.当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- file。
        b.当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD <file>，就回到了场景1，第二步按场景1操作。
        c.已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。
	4.删除文件
	    a.确实要从版本库中删除该文件 git rm text.txt 然后 git commit -m "remove test.txt"
		b.不小心删错了，版本库里还有 恢复的话用：git checkout -- test.txt（一个文件已经被提交到版本库，那么你永远不用担心误删，但是要小心，你只能恢复文件到最新版本，你会丢失最近一次提交后你修改的内容）

三.添加远程仓库
    1.GitHub创建仓库
	    a.登录GitHub 找到Create a new repo
		b.在Repository name 填入learngit ，其他保持默认设置，点击“Create repository”按钮
	2.关联本地仓库： git remote add origin git@github.com:michaelliao/learngit.git ，  
      	michaelliao替换成你自己的GitHub账户名
	3.第一次把本地库的所有内容推送到远程库上：
        $ git push -u origin master  之后每次本地提交后，只要有必要，就可以使用命令git push origin master推送最新修改；
	4.用命令git clone克隆一个本地库：
        $ git clone git@github.com:michaelliao/gitskills.git 注意：michaelliao换成自己的GitHub名称，gitskills为创建的远程库
		
四.分支管理
     1.创建与合并分支
	    查看分支：git branch
        创建分支：git branch <name>
        切换分支：git checkout <name>
        创建+切换分支：git checkout -b <name>
        合并某分支到当前分支：git merge <name>
        删除分支：git branch -d <name>   补充：带参数的git log也可以看到分支的合并情况：$ git log --graph --pretty=oneline --abbrev-commit
	2.bug分支
	    a.修复bug时，我们会通过创建新的bug分支进行修复，然后合并，最后删除；
		b.当手头工作没有完成时，先把工作现场git stash一下，然后去修复bug，修复后，再git stash pop，回到工作现场。可以用git stash list命令查看
	3.feature分支
	    要丢弃一个没有被合并过的分支，可以通过git branch -D <name>强行删除   若使用-d  $ git branch -d feature-vulcan  error: The branch 'feature-vulcan' is not fully merged.  If you are sure you want to delete it, run 'git branch -D feature-vulcan'.
    4.多人协作
	    a.用git remote -v显示更详细的远程库信息：
		b.推送分支：git push origin master 
		c.master分支是主分支，因此要时刻与远程同步；
          dev分支是开发分支，团队所有成员都需要在上面工作，所以也需要与远程同步；
	    d.抓取分支：$ git clone git@github.com:michaelliao/learngit.git
		e.在本地创建和远程分支对应的分支，使用git checkout -b branch-name origin/branch-name，本地和远程分支的名称最好一致；
		f.建立本地分支和远程分支的关联，使用git branch --set-upstream branch-name origin/branch-name；
	5.多人协作的工作模式
	     首先，可以试图用git push origin <branch-name>推送自己的修改；
         如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；
         如果合并有冲突，则解决冲突，并在本地提交；
         没有冲突或者解决掉冲突后，再用git push origin <branch-name>推送就能成功！
         如果git pull提示no tracking information，则说明本地分支和远程分支的链接关系没有创建，用命令git branch --set-upstream-to <branch-name> origin/<branch-name>。
         这就是多人协作的工作模式，一旦熟悉了，就非常简单。

