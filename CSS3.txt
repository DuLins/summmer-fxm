一.CSS3 边框
    1.CSS3 圆角
	    在 CSS2 中添加圆角棘手。我们不得不在每个角落使用不同的图像。
		CSS3中border-radius属性被用于创建圆角
		a.指定背景颜色的元素圆角
		   #rcorners1 {
              border-radius: 25px;
              background: #8AC007;
              padding: 20px; 
              width: 200px;
              height: 150px; 
            }  
	    b.指定边框的元素圆角
		    #rcorners2 {
              border-radius: 25px;
              border: 2px solid #8AC007;
              padding: 20px; 
              width: 200px;
              height: 150px; 
            }
	    c.指定背景图片的元素圆角
		    #rcorners3 {
              border-radius: 25px;
              background: url(paper.gif);
              background-position: left top;
              background-repeat: repeat;
              padding: 20px; 
              width: 200px;
              height: 150px; 
            } 
		d.指定每个圆角：
		    四个值: 第一个值为左上角，第二个值为右上角，第三个值为右下角，第四个值为左下角。
            三个值: 第一个值为左上角, 第二个值为右上角和左下角，第三个值为右下角（ border-radius: 15px 50px 30px:）
            两个值: 第一个值为左上角与右下角，第二个值为右上角与左下角（ border-radius: 15px 50px:）
            一个值： 四个圆角值相同
		e.创建椭圆边角：
		    border-radius: 50px/15px;
			或border-radius: 15px/50px;
			或border-radius：50%；
		f.CSS3圆角属性
		    border-top-left-radius：定义了左上角的弧度
			border-bottom-right-radius：定义了右上角的弧度
	2.CSS3盒阴影
	    box-shadow被用来添加阴影；
		  div
           {
           box-shadow: 10px 10px 5px #888888; （第一个参数定义右边阴影长度，第二个定义下边长度，第三个定义阴影虚拟程度）
           }
	3.CSS3边界图片
	    在div中使用图片创建边框
		 div
          {
          border-image:url(border.png) 30 30 round;
          -webkit-border-image:url(border.png) 30 30 round; /* Safari 5 and older */
          -o-border-image:url(border.png) 30 30 round; /* Opera */
          }
        注意：round用于使图像平铺（重复），stretch被拉伸以填充该区域

二.CSS3背景
    1.background-image：添加背景图片
        #example1 { 
            background-image: url(img_flwr.gif), url(paper.gif); （显示在最顶端的为第一张）
            background-position: right bottom, left top; 
            background-repeat: no-repeat, repeat; 
            }	
	2.background-size：指定背景图片的大小
	    div
        {
            background:url(img_flwr.gif);
            background-size:80px 60px;
            background-repeat:no-repeat;
        }
	3.background-Origin：指定了背景图片的位置区域
	    content-box，padding-box，border-box区域可以防止背景图片
		    div
             {
              background:url(img_flwr.gif);
              background-repeat:no-repeat;
              background-size:100% 100%;
              background-origin:content-box;
            }
	4.background-clip：背景裁剪属性是从指定位置开始绘制
	    #example1 { 
            border: 10px dotted black; 
            padding: 35px; 
            background: yellow; 
            background-clip: content-box; （content-box之外的区域被剪裁）
          }
		  
三.CSS3渐变
       CSS3 渐变（gradients）可以让你在两个或多个指定的颜色之间显示平稳的过渡；
	   渐变效果的元素在放大时看起来效果更好，因为渐变（gradient）是由浏览器生成的。
	1.CSS3 线性渐变
	    创建一个线性渐变，必须至少定义两种颜色结点
		颜色结点即你想要呈现平稳过渡的颜色。
		语法:background: linear-gradient(direction, color-stop1, color-stop2, ...);//可以设置多个颜色结点）
		实例1:(从上到下的线性渐变）
		    #grad {
               background: -webkit-linear-gradient(red, blue); /* Safari 5.1 - 6.0 */
               background: -o-linear-gradient(red, blue); /* Opera 11.1 - 12.0 */
               background: -moz-linear-gradient(red, blue); /* Firefox 3.6 - 15 */
               background: linear-gradient(red, blue); /* 标准的语法 */
            }
		实例2：（从左到右的线性渐变）
		    background：linear-gradient（to right，red, blue);
		实例3.（从左上角到右下角的线性渐变）
		    background：linear-gradient（to bottom right, red, blue)
		实例4：（使用角度）
		    background: linear-gradient(angle, color-stop1, color-stop2);  //angle——（0deg-90deg-180deg--90deg）顺时针
		实例5：（使用透明度）
		     为了添加透明度，我们使用 rgba() 函数来定义颜色结点。rgba() 函数中的最后一个参数可以是从 0 到 1 的值，
			 它定义了颜色的透明度：0 表示完全透明，1 表示完全不透明。
			background: linear-gradient(to right, rgba(255,0,0,0), rgba(255,0,0,1)); /* 标准的语法 */
		实例6：（重复的线性渐变）
		    background: repeating-linear-gradient(red, yellow 10%, green 20%);
    2.CSS3 径向渐变
	    语法：background: radial-gradient(center, shape size, start-color, ..., last-color);
		//颜色结点均匀分布的径向渐变
		    #grad {
               background: -webkit-radial-gradient(red, green, blue); /* Safari 5.1 - 6.0 */
               background: -o-radial-gradient(red, green, blue); /* Opera 11.6 - 12.0 */
               background: -moz-radial-gradient(red, green, blue); /* Firefox 3.6 - 15 */
               background: radial-gradient(red, green, blue); /* 标准的语法 */
            }
		//结点不均匀发布的结点
		  background: radial-gradient(red 5%, green 15%, blue 60%); /* 标准的语法 */
		//设置形状
		     shape 参数定义形状。circle 或 ellipse。circle 圆形，ellipse椭圆形。默认值是 ellipse。
		  background: radial-gradient(circle, red, yellow, green);
		//不同尺寸大小关键词
		           closest-side,farthest-side,closest-corner,farthest-corner
		    background: radial-gradient(60% 55%, closest-side,blue,green,yellow,black);
			background: radial-gradient(60% 55%, farthest-side,blue,green,yellow,black);
			
四.CSS3 文本效果
    1.文本阴影
	    h1
       {
        text-shadow: 5px 5px 5px #FF0000; //第一个参数阴影右移距离，第二个阴影下移距离，第三个阴影模糊程度
       }
	2.盒子阴影
	    box-shadow: 10px 10px 5px #888888;//参数含义和文本阴影相同
	    box-shadow: 10px 10px grey;   //给阴影添加颜色
		box-shadow: 10px 10px 5px grey;   //再添加一个模糊效果
		实例：（卡片效果）
		  div.card {
              width: 250px;
              box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);
              text-align: center;
            }
	3.Text Overflow属性
	     指定应向用户如何显示溢出内容
		p.test1 {
          white-space: nowrap; 
          width: 200px; 
          border: 1px solid #000000;
          overflow: hidden;   //溢出的内容将会被隐藏
          text-overflow: ellipsis;  //溢出的内容显示为省略号
		  //text-overflow: clip；   //溢出的内容直接被剪切
        }
	4.换行:
	     自动换行属性允许您强制文本换行 - 即使这意味着分裂它中间的一个字;
		p {word-wrap:break-word;}
	5.单词拆分换行
	    p.test1 {
            word-break: keep-all;  //单词不会被拆分
			 //word-break：break all； //单词被拆分换行；
        }

五.CSS3 2D转换
    1.translate()方法
	    根据左(X轴)和顶部(Y轴)位置给定的参数，从当前元素位置移动。
		实例：
		    div
             {
              transform: translate(50px,100px); //表示从左边元素移动50个像素，并从顶部移动100像素
              -ms-transform: translate(50px,100px); /* IE 9 */
              -webkit-transform: translate(50px,100px); /* Safari and Chrome */
             }
    2.rotate()
	    在一个给定度数顺时针旋转的元素。负值是允许的，这样是元素逆时针旋转。
		实例：
		    div
             {
              transform: rotate(30deg);  //顺时针旋转30度
              -ms-transform: rotate(30deg); /* IE 9 */
              -webkit-transform: rotate(30deg); /* Safari and Chrome */
             }
	3.scale()方法
	    该元素增加或减少的大小，取决于宽度（X轴）和高度（Y轴）的参数：
		实例：
		    -ms-transform:scale(2,3); /* IE 9 */
            -webkit-transform: scale(2,3); /* Safari */
            transform: scale(2,3); /* 标准语法 */   //转变宽度为原来的2倍，和其原始大小3倍的高度
	4.skew()
	    语法:transform:skew(<angle> [,<angle>]);
		实例：
		    div
             {
             transform: skew(30deg,20deg);  //表示元素在x轴和y轴上倾斜20度30度
             -ms-transform: skew(30deg,20deg); /* IE 9 */
             -webkit-transform: skew(30deg,20deg); /* Safari and Chrome */
            }
	5.matrix()
	    matrix()方法和2D变换方法合并成一个。
        matrix 方法有六个参数，包含旋转，缩放，移动（平移）和倾斜功能。
		transform:matrix(0.866,0.5,-0.5,0.866,0,0);
	
六.3D转换
    1.rotateX()
	   rotateX()方法，围绕其在一个给定度数X轴旋转的元素。
	   rotateY()方法，围绕其在一个给定度数Y轴旋转的元素。
	   实例：
	       div
           {
            transform: rotateX(120deg);
            -webkit-transform: rotateX(120deg); /* Safari 与 Chrome */
           }
	2.transform-style
	    规定被嵌套元素如何在 3D 空间中显示。
	     transform-style: preserve-3d;
	
七.CSS3 过渡
        元素从一种样式逐渐改变为另一种的效果
		必须规定两项内容：指定要添加效果的CSS属性,指定效果的持续时间。
		实例1：（改变宽度）
		    div
            {
	          width:100px;
			  height:100px;
			  background:red;
			  transition:width 2s;
			  -webkit-transition:width 2s; /* Safari */
			}
            div:hover
			{
			  width:300px;
			}
		实例2：（多项改变：宽度，高度，旋转）
		    div {
			  width: 100px;
			  height: 100px;
			  background: red;
			  -webkit-transition: width 2s, height 2s, -webkit-transform 2s; /* For Safari 3.1 to 6.0 */
			  transition: width 2s, height 2s, transform 2s;
			}
			div:hover {
			  width: 200px;
			  height: 200px;
			  -webkit-transform: rotate(180deg); /* Chrome, Safari, Opera */
			  transform: rotate(180deg);
			}
	1.过渡属性
	    transition
        简写属性，用于在一个属性中设置四个过渡属性。
        transition-property
        规定应用过渡的 CSS 属性的名称。如width，height。
		transition-duration
		定义过渡效果花费的时间。默认是 0。
		transition-timing-function
		规定过渡效果的时间曲线。默认是 "ease"。（由慢变快） linear：以相同的速度过渡。
		transition-delay
		规定过渡效果何时开始。默认是 0。
		
八.CSS3 动画
    1.@keyframes规则
	    指定一个CSS样式和动画将逐步从目前的样式更改为新的样式。
		实例：
		    div
			{
			  width:100px;
			  height:100px;
			  background:red;
			  animation:myfirst 5s;
			  -webkit-animation:myfirst 5s; /* Safari and Chrome */
			}
			@keyframes myfirst
			{
			  from {background:red;}
			  to {background:yellow;}
			}
			@-webkit-keyframes myfirst /* Safari and Chrome */
			{
			  from {background:red;}
			  to {background:yellow;}
			}
	2.CSS3 动画
	    当在 @keyframes 创建动画，把它绑定到一个选择器，否则动画不会有任何效果
		指定至少这两个CSS3的动画属性绑定向一个选择器：动画的名称和动画的时长
		//上例将myfirst捆绑到div元素上面
	3.CSS3动画是什么
	    动画是使元素从一种样式逐渐变化为另一种样式的效果。
		您可以改变任意多的样式任意多的次数。
		请用百分比来规定变化发生的时间，或用关键词 "from" 和 "to"，等同于 0% 和 100%。
		0% 是动画的开始，100% 是动画的完成。
		实例1：（当动画为 25% 及 50% 时改变背景色，然后当动画 100% 完成时再次改变）
		    @keyframes myfirst
			{
			  0%   {background: red;}
			  25%  {background: yellow;}
			  50%  {background: blue;}
			  100% {background: green;}
			}
		实例2：（改变背景色和位置）
		    @keyframes myfirst
			{
			  0%   {background: red; left:0px; top:0px;}
			  25%  {background: yellow; left:200px; top:0px;}
			  50%  {background: blue; left:200px; top:200px;}
			  75%  {background: green; left:0px; top:200px;}
			  100% {background: red; left:0px; top:0px;}
			}
	4.动画设置所有属性
        div
        {
		  animation-name: myfirst; （规定 @keyframes 动画的名称。）
		  animation-duration: 5s; （规定动画完成一个周期所花费的秒或毫秒。默认是 0。）
		  animation-timing-function: linear;（规定动画的速度曲线。默认是 "ease"又慢到快。）
		  animation-delay: 2s;（规定动画何时开始。默认是 0。）
		  animation-iteration-count: infinite; （规定动画被播放的次数。默认是 1。）
		  animation-direction: alternate;（规定动画是否在下一周期逆向地播放。）
		  animation-play-state: running;
		  /* Safari 与 Chrome: */
		  -webkit-animation-name: myfirst;
		  -webkit-animation-duration: 5s;
		  -webkit-animation-timing-function: linear;
		  -webkit-animation-delay: 2s;
		  -webkit-animation-iteration-count: infinite;
		  -webkit-animation-direction: alternate;
		  -webkit-animation-play-state: running;
		}	
 
九.CSS3 多列
        将文本内容设计成像报纸一样的多列布局；
	1.创建多列
	    column-count 属性指定了需要分割的列数。
		//div {
        -webkit-column-count: 3; /* Chrome, Safari, Opera */
        -moz-column-count: 3; /* Firefox */
		column-count: 3;
		} 
	2.列与列之间的间隙
	    column-gap: 40px;
	3.列边框
	    column-rule-style 属性指定了列与列间的边框样式：column-rule-style: solid;
		column-rule-width 属性指定了两列的边框厚度: column-rule-width:1px;
		column-rule-color 属性指定了两列的边框颜色：column-rule-color:lightblue
	4.指定元素跨越多少列
	    h2 {
          -webkit-column-span: all; /* Chrome, Safari, Opera */
          column-span: all;
        } 
    5.指定列的宽度
	    column-width: 100px;
	
十.CSS 图片
    1.圆角图片
	    img {
		  border-radius: 8px;
		}
	2.椭圆形图片
		border-radius: 50%;
	3.缩略图(用border属性来创建)
	    border: 1px solid #ddd;
	4.响应式图片
	    响应式图片会自动适配各种尺寸的屏幕。
		img {
		  max-width: 100%;
		  height: auto;
		}
	5.图片文本（定位图片文本）
	    .topleft {
		  position: absolute;
		  top: 8px;（文字距离顶部的距离）
		  left: 8px;（文字距离左边的距离）//bottom下面
		  font-size: 18px;
		}
	6.卡片式图片
	    div.polaroid {
		  width: 80%;
		  background-color: white;
		  box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);
		  margin-bottom: 25px;
		}
	    div.container {
		  text-align: center;
		  padding: 10px 20px;
		}
	7.图片滤镜
		CSS filter 属性用为元素添加可视效果 (例如：模糊与饱和度) 。
		//修改颜色为黑白（100%灰度）
		img {
          -webkit-filter: grayscale(100%); /* Chrome, Safari, Opera */
		  filter: grayscale(100%);
		}
		
十一.CSS3 按钮
    1.按钮颜色：
	    .button1 {background-color: #4CAF50;} /* Green */
		//<button class="button button2">Blue</button> 此例既有button样式也有button2的样式
	2.按钮大小
	    .button1 {font-size: 10px;}
	3.圆角按钮
	    .button4 {border-radius: 12px;} //参数数值越大圆角越明显
        .button5 {border-radius: 50%;} //百分数固定为50%
  	4.按钮边框颜色
	    .button1 {
            background-color: white; //设置背景颜色
            color: black;  //设置字体颜色
            border: 2px solid #4CAF50; /* Green */ 设置边框属性
        }
	5.鼠标悬停按钮
	      hover 选择器来修改鼠标悬停在按钮上的样式。
	    .button {
            -webkit-transition-duration: 0.4s; /* Safari */
            transition-duration: 0.4s;      //设置“hover”效果的速度
        }
        .button:hover {
            background-color: #4CAF50; /* Green */
            color: white;
        }
	6.按钮阴影
	    .button2:hover {
        box-shadow: 0 12px 16px 0 rgba(0,0,0,0.24), 0 17px 50px 0 rgba(0,0,0,0.19);
        }
	7.禁用按钮
	    使用 opacity 属性为按钮添加透明度 (看起来类似 "disabled" 属性效果)
		.disabled {
           opacity: 0.6;   //设置透明度
           cursor: not-allowed;  //设置鼠标悬停时的样式
        }
	8.按钮组
	       移除外边距并添加 float:left 来设置按钮组:
	    float: left; //将按钮设置在同一排
	9.按钮动画
	  a.鼠标移到按钮上后添加箭头标记
		.button span:after {  :after 选择器在被选元素的内容后面插入内容。请使用 content 属性来指定要插入的内容。
			content: '»';
			position: absolute;
			opacity: 0;
			top: 0;
			right: -20px;
			transition: 0.5s;
		}
.		。button:hover span:after {
			opacity: 1;
			right: 0;
		}
		.button:hover span {
			padding-right: 25px;
		}
	  b.点击时添加“波纹”效果
	    .button:after {
		  content: "";
		  background: #90EE90;
		  display: block;
		  position: absolute;
		  padding-top: 300%;
		  padding-left: 350%;
		  margin-left: -20px!important;
		  margin-top: -120%;
		  opacity: 0;
		  transition: all 0.8s
		}
		.button:active:after {
		  padding: 0;
		  margin: 0;
		  opacity: 1;
		  transition: 0s
		}
	  c.点击时添加“压下”效果
	    .button {
		  display: inline-block;
	      padding: 15px 25px;
		  font-size: 24px;
		  cursor: pointer;
		  text-align: center;   
		  text-decoration: none;
	      outline: none;
		  color: #fff;
	      background-color: #4CAF50;
		  border: none;
		  border-radius: 15px;
	      box-shadow: 0 9px #999;
		}
	    .button:hover {background-color: #3e8e41}

		.button:active {
		  background-color: #3e8e41;
		  box-shadow: 0 5px #666;
		  transform: translateY(4px);
		}
	
十二.CSS3 分页实例
    1.点击及鼠标悬停分页样式
	    ul.pagination {
		  display: inline-block;
		  padding: 0;
		  margin: 0;
		}

		ul.pagination li {display: inline;}
		ul.pagination li a {
		  color: black;
		  float: left;
		  padding: 8px 16px;
		  text-decoration: none;
		}
		ul.pagination li a.active {
		  background-color: #4CAF50;
		  color: white;
		}
		ul.pagination li a:hover:not(.active) {  设置非 <.active> 元素的所有元素的背景色：
		    background-color: #ddd;
		}
	2.圆角样式
	    border-radius: 5px;
    3.分页间隔
	    margin: 0 4px;

十四.CSS3框大小
    1.不使用css3box-sizing
	   width(宽) + padding(内边距) + border(边框) = 元素实际宽度
       height(高) + padding(内边距) + border(边框) = 元素实际高度
	   .div2 {
         width: 300px;
         height: 100px;
         padding: 50px;
         border: 1px solid red;
        }
	2.使用 CSS3 box-sizing 属性
	    .div1 {
		  width: 300px;
		  height: 100px;
		  border: 1px solid blue;
		  box-sizing: border-box;
		}
	
十五.CSS3多媒体查询
    1.查询语法
	    @media not|only mediatype and (expressions) {
           CSS 代码...;
		}
		//not: not是用来排除掉某些特定的设备的,only: 用来定某种特别的媒体类型。
		//可以在不同的媒体上使用不同的样式文件：
		     <link rel="stylesheet" media="mediatype and|not|only (expressions)" href="print.css">
	2.查询实例（电子邮箱的链接列表）
	     <li><a data-email="johndoe@example.com" href="mailto:johndoe@example.com">John Doe</a></li>
		a.520-699px宽度-添加邮箱图标
		    @media screen and (max-width: 699px) and (min-width: 520px) {
                ul li a {
                  padding-left: 30px;
                  background: url(email-icon.png) left center no-repeat;
                }
            }
		b.700-1000px-添加文本前缀信息
		    @media screen and (max-width: 1000px) and (min-width: 700px) {
				ul li a:before {
				  content: "Email: ";
				  font-style: italic;
				  color: #666666;
				}
			}
		c.大于 1001px 宽度 - 添加邮件地址
		    @media screen and (min-width: 1001px) {
				ul li a:after {
				  content: " (" attr(data-email) ")";
				  font-size: 12px;
			      font-style: italic;
				  color: #666666;
				}
			}
			
十六.CSS3 弹性盒子（Flex Box)
    1.介绍：一种当页面需要适应不同的屏幕大小以及设备类型时确保元素拥有恰当的行为的布局方式。
           引入弹性盒布局模型的目的是提供一种更加有效的方式来对一个容器中的子元素进行排列、对齐和分配空白空间。
	2.内容
	    组成：弹性容器（Flex container）和弹性元素（Flex item）
		通过设置 display 属性的值为 flex 或 inline-flex将其定义为弹性容器。
		//弹性容器外及弹性子元素内是正常渲染的。
		//弹性盒子只定义了弹性子元素如何在弹性容器内布局。